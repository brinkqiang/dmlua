/********************************************************************
**       This cc file is generated by program,                     **
**            Please do not change it directly.                    **
**                   Auther: brinkqiang                            **
********************************************************************/
// source: sol.pkg

#include "sol.sol.h"
#include "sol/sol.hpp"

#include "../common/macros.h"

#include "../common/enum.h"

#include "../common/struct.h"

#include "../role/role.h"

#include "../role/rolemgr.h"

namespace lua_module_sol
{
    static sol::table require_api(sol::this_state L)
    {
        sol::state_view lua(L);
        sol::table module = lua.create_table();

        module.new_usertype<STaskInfo>(
            "STaskInfo"
            , sol::call_constructor, sol::constructors<sol::types<>>()
            );
            
        module.new_usertype<SPos>(
            "SPos"
            , sol::call_constructor, sol::constructors<sol::types<>>()
            );

        module.new_usertype<CObj>(
            "CObj"
            , sol::call_constructor, sol::constructors<sol::types<>>()

            , sol::meta_function::garbage_collect, sol::destructor(&CObj::~CObj)

            , "SetObjID", &CObj::SetObjID
            , "GetObjID", &CObj::GetObjID
            , "GetObjID", &CObj::GetObjID
            , "SetName", &CObj::SetName
            , "GetName", &CObj::GetName
            );

        module.new_usertype<CRole>(
            "CRole"
            , sol::call_constructor, sol::constructors<sol::types<>>()

            , sol::meta_function::garbage_collect, sol::destructor(&CRole::~CRole)

            , "SetMp", &CRole::SetMp
            , "GetMp", &CRole::GetMp
            , "SetHp", &CRole::SetHp
            , "GetHp", &CRole::GetHp
            , "AddMP", &CRole::AddMP
            , "AddHP", &CRole::AddHP
            , "SetPos", &CRole::SetPos
            , "GetPos", &CRole::GetPos
            , "AcceptTask", &CRole::AcceptTask
            , "FinishTask", &CRole::FinishTask
            );

        module.set_function("FindRole",&FindRole);
        module.set_function("CreateRole",&CreateRole);
        module.set_function("ReleaseRole",&ReleaseRole);

        module.new_usertype<CRoleMgr>(
            "CRoleMgr"
            , sol::call_constructor, sol::constructors<sol::types<>>()


            );
        return module;
    }
}

LUA_API int luaopen_sol(lua_State* L)
{
    return sol::stack::call_lua(L, 1, lua_module_sol::require_api);
}

LUA_API int require_sol(lua_State* L)
{
    luaL_requiref(L, "sol", luaopen_sol, 0);
    printf("lua module: require sol\n");
    return 1;
}
